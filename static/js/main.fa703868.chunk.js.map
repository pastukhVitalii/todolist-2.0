{"version":3,"sources":["common/Button/button/Button.tsx","TodoListTasks/TodoListTask/TodoListTask.tsx","TodoListTasks/TodoListTasks.tsx","TodoListFooter/TodoListFooter.tsx","TodoListHeader/TodoListTitle.tsx","TodoListHeader/AddNewItemForm.tsx","api/api.ts","todolistReducer.ts","TodoList.tsx","common/Button/input/Input.tsx","App.tsx","serviceWorker.js","store.ts","index.js"],"names":["Button","props","small","className","type","onClick","e","disabled","disable","btnName","TodoListTask","state","editMode","title","task","onIsDoneChanged","status","currentTarget","checked","changeStatus","id","onTitleChanged","setState","value","activateEditMode","deactivateEditMode","changeTitle","onDeleteTask","deleteTask","onPriorityChange","event","changePriority","render","containerCssClass","priority","onChange","onBlur","autoFocus","React","Component","TodoListTasks","tasksElements","tasks","map","key","loadingTasks","length","TodoListFooter","isHidden","onAllFilterClick","changeFilter","onCompletedFilterClick","onActiveFilterClick","onShowFiltersClick","onHideFiltersClick","classForAll","filterValue","classForCompleted","classForActive","TodoListTitle","onDelete","deleteTodolist","todolistId","updateTodolist","defaultValue","name","AddNewItemForm","error","onAddItemClick","newText","trim","addItem","onKeyPress","classNameForInput","placeholder","instance","axios","create","baseURL","withCredentials","headers","api","post","then","res","data","put","get","delete","taskId","email","password","CREATE_TODOLIST","ADD_TASK","UPDATE_TASK","DELETE_TODOLIST","DELETE_TASK","SET_TODOLIST","SET_TASKS","LOADING_TODO","LOADING_TASKS","SET_USER_DATA","LOGIN_SUCCESS","LOGOUT_SUCCESS","initialState","todolists","loadingTodo","userId","login","isAuth","todolistReducer","action","newTodolist","tl","newTask","t","obj","filter","isActive","loadingTodoAC","loadingTasksAC","setTodolistsTC","dispatch","setAuthUserDataTC","response","resultCode","setAuthUserDataAC","signInTC","catch","Error","TodoList","deleteTodolistTC","updateTodolistTC","addTask","addTaskTC","newFilterValue","changeTask","changedTask","find","updateTaskTC","deleteTaskTC","tasksFilter","this","setTaskTC","ConnectedTodoList","connect","setTasksAC","items","deleteTodolistAC","updateTodolistAC","addTaskAC","item","updateTaskAC","deleteTaskAC","Input","errorClass","App","addTodoList","addTodolistTC","restoreState","setLogin","setPassword","signIn","signOut","signOutTC","todolist","ConnectedApp","addTodolistAC","Boolean","window","location","hostname","match","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fa703868.chunk.js","sourcesContent":["import React from 'react';\nimport './Button.css';\n\nexport type OwnPropTypes = {\n    btnName: string\n    type: 'default' | 'primary' | 'danger' | string\n    disable?: boolean\n    small?: boolean\n    active? : string\n    onClick: () => void\n}\nconst Button = (props: OwnPropTypes) => {\n    let small = props.small? 'small': '';\n    return (\n        <button className={`button + ${props.type} + ${small}`} onClick={ (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => props.onClick()} disabled={props.disable}> {props.btnName}</button>\n    )\n}\n\nexport default Button;\n","import React, {ChangeEvent} from \"react\";\nimport {TaskType} from \"../../types/entities\";\nimport Button from \"../../common/Button/button/Button\";\nimport '../../TodoList.css';\n\ntype StateType = {\n    editMode: boolean\n    title: string\n}\n\ntype OwnPropsType = {\n    changeStatus: (id: string, status: number) => void\n    changeTitle: (id: string, title: string) => void\n    changePriority: (id: string, priority: number) => void\n    deleteTask: (id: string) => void\n    task: TaskType\n}\n\nclass TodoListTask extends React.Component<OwnPropsType, StateType> {\n\n    state: StateType = {\n        editMode: false,\n        title: this.props.task.title\n    };\n\n    onIsDoneChanged = (e: ChangeEvent<HTMLInputElement>) => {\n        let status = e.currentTarget.checked ? 2 : 0;\n        this.props.changeStatus(this.props.task.id, status);\n    };\n\n    onTitleChanged = (e: ChangeEvent<HTMLInputElement>) => {\n        this.setState({title: e.currentTarget.value});\n    };\n\n    activateEditMode = (e: React.MouseEvent<HTMLElement>) => {\n        this.setState({editMode: true});\n    };\n\n    deactivateEditMode = (e: React.FocusEvent<HTMLInputElement>) => {\n        this.props.changeTitle(this.props.task.id, this.state.title);\n        this.setState({editMode: false});\n    };\n\n    onDeleteTask = () => {\n        this.props.deleteTask(this.props.task.id);\n    };\n\n    onPriorityChange = (event: ChangeEvent<HTMLSelectElement>) => {\n        this.props.changePriority(this.props.task.id, +event.currentTarget.value)\n    };\n\n    render = () => {\n        let containerCssClass = this.props.task.status ? \" done\" : \"\";\n        let priotityTitle = \"\";\n        switch (this.props.task.priority) {\n            case 0:\n                priotityTitle = \"Low\";\n                break;\n            case 1:\n                priotityTitle = \"Middle\";\n                break;\n            case 2:\n                priotityTitle = \"High\";\n                break;\n            case 3:\n                priotityTitle = \"Urgently\";\n                break;\n            case 4:\n                priotityTitle = \"Later\";\n                break;\n        }\n        return (\n            <div className={'todoList-task'}>\n                <div className={containerCssClass}>\n                    <input className={'checkBox'} type=\"checkbox\"\n                           checked={this.props.task.status === 2}\n                           onChange={this.onIsDoneChanged}/>\n                    {this.state.editMode\n                        ? <input onBlur={this.deactivateEditMode}\n                                 onChange={this.onTitleChanged}\n                                 autoFocus={true}\n                                 value={this.state.title}/>\n                        : <span onClick={this.activateEditMode}>{this.props.task.title}</span>\n                    }, <b>priority:</b>\n                    <select className={'select'} value={this.props.task.priority} onChange={this.onPriorityChange}>\n                        <option value='2'>High</option>\n                        <option value='1'>Middle</option>\n                        <option value='0'>Low</option>\n                    </select>\n                </div>\n                <Button type={'delete'} onClick={this.onDeleteTask} btnName={'x'}/>\n            </div>\n        );\n    }\n}\n\nexport default TodoListTask;","import React from \"react\";\nimport TodoListTask from \"./TodoListTask/TodoListTask\";\nimport {TaskType} from \"../types/entities\";\nimport '../TodoList.css'\n\ntype OwnPropsType = {\n    tasks: Array<TaskType>\n    changeStatus: (id: string, status: number) => void\n    changeTitle: (id: string, title: string) => void\n    changePriority: (id: string, priority: number) => void\n    deleteTask: (id: string) => void\n    loadingTasks: boolean\n}\nclass TodoListTasks extends React.Component<OwnPropsType> {\n  render = () => {\n    let tasksElements = this.props.tasks.map(task => {\n      return (\n        <TodoListTask\n          task={task}\n          changeStatus={this.props.changeStatus}\n          changeTitle={this.props.changeTitle}\n          changePriority={this.props.changePriority}\n          key={task.id}\n          deleteTask={this.props.deleteTask}\n        />\n      )\n    });\n    return (\n      <div className=\"todoList-tasks\">\n          {this.props.loadingTasks?<div>Loading...</div> : tasksElements}\n          {this.props.tasks.length === 0 && !this.props.loadingTasks? <div>Hey create a new tasks</div>:  <span></span> }\n      </div>\n    )\n  }\n}\n\nexport default TodoListTasks;","import React from \"react\";\nimport '../TodoList.css';\nimport Button from \"../common/Button/button/Button\";\n\ntype StateType = {\n    isHidden: boolean\n}\n\nexport type OwnPropsType = {\n    changeFilter: (newFilterValue: 'All' | 'Completed' | 'Active') => void\n    filterValue: 'All' | 'Completed' | 'Active'\n}\n\nclass TodoListFooter extends React.Component<OwnPropsType, StateType> {\n    state: StateType = {\n        isHidden: false\n    }\n\n    onAllFilterClick = () => {\n        this.props.changeFilter('All')\n    }\n    onCompletedFilterClick = () => {\n        this.props.changeFilter('Completed')\n    }\n    onActiveFilterClick = () => {\n        this.props.changeFilter('Active')\n    }\n    onShowFiltersClick = (event: React.MouseEvent<HTMLSpanElement>) => {\n        this.setState({isHidden: true})\n    }\n    onHideFiltersClick = (event: React.MouseEvent<HTMLSpanElement>) => {\n        this.setState({isHidden: false})\n    }\n\n    render = () => {\n        let classForAll = this.props.filterValue === \"All\" ? \"filter-active\" : \"\";\n        let classForCompleted = this.props.filterValue === \"Completed\" ? \"filter-active\" : \"\";\n        let classForActive = this.props.filterValue === \"Active\" ? \"filter-active\" : \"\";\n        return (\n            <>\n                <div className={\"todoList-footer-btn\"}>\n                    {!this.state.isHidden && <>\n                        <Button type={`primary + ${classForAll}`} small={true} onClick={this.onAllFilterClick}\n                                btnName={'All'}/>\n                        <Button type={`primary + ${classForCompleted}`} small={true}\n                                onClick={this.onCompletedFilterClick}\n                                btnName={'Completed'}/>\n                        <Button type={`primary + ${classForActive}`} small={true} onClick={this.onActiveFilterClick}\n                                btnName={'Active'}/>\n                    </>}\n                </div>\n                <div className={'todoList-footer-filter'}>{!this.state.isHidden && <span onClick={this.onShowFiltersClick}>Hide filter </span>}\n                    {this.state.isHidden && <span onClick={this.onHideFiltersClick}>Show filter </span>}</div>\n            </>\n        )\n    }\n}\n\nexport default TodoListFooter;\n/*\n\n` ${class1} ${this.isDone && class2}`\n  ` ${class1} text ${this.isDone && class2}`\n*/\n","import React, {ChangeEvent} from \"react\";\nimport '../TodoList.css'\nimport Button from \"../common/Button/button/Button\";\n\ntype StateType = {\n    editMode: boolean,\n    title: string\n}\n\ntype OwnPropsType = {\n    title: string\n    todolistId: string\n    deleteTodolist: (todolistId: string) => void\n    updateTodolist: (title: string) => void\n    name: string\n}\n\nclass TodoListTitle extends React.Component<OwnPropsType, StateType> {\n\n    state: StateType = {\n        editMode: false,\n        title: ''\n    }\n    onDelete = () => {\n        this.props.deleteTodolist(this.props.todolistId)\n    }\n    activateEditMode = () => {\n        this.setState({editMode: true});\n    }\n\n    deactivateEditMode = () => {\n        this.setState({editMode: false});\n        this.props.updateTodolist(this.state.title);\n    }\n\n    onTitleChanged = (e: ChangeEvent<HTMLInputElement>) => {\n        this.setState({title: e.currentTarget.value})\n    }\n\n    render = () => {\n        return (\n            <div className=\"todoList-header\">\n                <span className=\"todoList-header-title\">\n                    {this.state.editMode\n                        ? <input onBlur={this.deactivateEditMode} onChange={this.onTitleChanged} autoFocus={true}\n                                 defaultValue={this.props.title}/>\n                        : <span onClick={this.activateEditMode}>{this.props.title}</span>\n                    }\n                </span>\n                <Button type={'primary'} small={true} onClick={this.onDelete} btnName={this.props.name}/>\n            </div>\n        )\n    }\n}\n\nexport default TodoListTitle;","import React, {ChangeEvent, KeyboardEvent} from \"react\";\nimport '../TodoList.css'\nimport Button from \"../common/Button/button/Button\";\n\nexport type OwnPropsType = {\n    addItem: (newText: string) => void,\n    placeholder: string,\n    btnName: string\n}\n\ntype StateType = {\n    error: boolean\n    title: string\n}\n\nclass AddNewItemForm extends React.Component<OwnPropsType, StateType> {\n\n    state: StateType = {\n        error: false,\n        title: ''\n    }\n\n    onAddItemClick = () => {\n        let newText = this.state.title;\n        if (newText.trim() === \"\") {\n            this.setState({error: true})\n        } else {\n            this.props.addItem(newText);\n            this.setState({\n                error: false,\n                title: ''\n            });\n        }\n    };\n\n    onTitleChanged = (e: ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            error: false,\n            title: e.currentTarget.value\n        });\n    }\n\n    onKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === 'Enter') {\n            this.onAddItemClick();\n        }\n    }\n\n    render = () => {\n        let classNameForInput = (this.state.error) ? 'error' : '';\n        return (\n            <div className=\"item-form\">\n                <input\n                    type=\"text\" placeholder={this.props.placeholder}\n                    className={`${classNameForInput} + input-form`}\n                    onChange={this.onTitleChanged}\n                    onKeyPress={this.onKeyPress}\n                    value={this.state.title}\n                />\n                <Button type={'primary'} small={true} onClick={this.onAddItemClick} btnName={this.props.btnName}/>\n            </div>\n        )\n    }\n}\n\nexport default AddNewItemForm;","import axios from \"axios\";\nimport {TaskType, TodoType} from \"../types/entities\";\n\nconst instance = axios.create({\n  baseURL: \"https://social-network.samuraijs.com/api/1.1\",\n  withCredentials: true,\n  headers: {'API-KEY':'eec707e4-21e7-4972-ae6a-c9f0a894d660'}\n})\n\ntype CommonApiType<T> = {\n    resultCode: 0| 1 | 100\n    messages: Array<string>\n    data: T,\n\n}\n\nexport const api = {\n\n  createTodolist(title: string) {\n    return instance.post<CommonApiType<{item: TodoType}>>(\"todo-lists\",{title: title})\n      .then(res => res.data);\n  },\n  updateTitleTodolist(title: string, todolistId: string) {\n    return instance.put(`/todo-lists/${todolistId}/`,{title: title})\n      .then(res => res.data);\n  },\n  getTodolist() {\n    return instance.get(\"todo-lists\" )\n      .then(res => res.data)\n  },\n  getTasks(todolistId: string) {\n    return instance.get(`/todo-lists/${todolistId}/tasks`)\n      .then(res => res.data)\n  },\n  deleteTodolist(todolistId: string) {\n    return instance.delete(`/todo-lists/${todolistId}`)\n      .then(res => res.data)\n  },\n  createTask(newText: string, todolistId: string) {\n    return instance.post<CommonApiType<{item: TaskType}>>(`/todo-lists/${todolistId}/tasks`,{title: newText});\n  },\n  updateTask(taskId: string, todolistId: string, task: TaskType) {\n    return instance.put<CommonApiType<{item: TaskType }>>(`/todo-lists/${todolistId}/tasks/${taskId}`, task);\n  },\n  deleteTask(taskId: string, todolistId: string) {\n    return instance.delete<CommonApiType<{ }>>(`/todo-lists/${todolistId}/tasks/${taskId}`);\n  },\n  me() {\n    return instance.get<CommonApiType<{ id: string, login: string, email: string}>>(`/auth/me`);\n  },\n  login(email: string, password: string) {\n    return instance.post<CommonApiType<{email: string, password: string}>>(`/auth/login`, {\n      email,\n      password});\n  },\n  logout() {\n    return instance.delete(`auth/login`)\n  }\n}","import {api} from \"./api/api\";\nimport {TaskType, TodoType, TodoUpdateObject} from \"./types/entities\";\nimport {ThunkAction, ThunkDispatch} from \"redux-thunk\";\nimport {AppStateType} from \"./store\";\n\nexport const CREATE_TODOLIST = 'TodoApp/TodoList/CREATE_TODOLIST';\nexport const ADD_TASK = 'TodoApp/TodoList/ADD_TASK';\nexport const UPDATE_TASK = 'TodoApp/TodoList/UPDATE_TASK';\nexport const DELETE_TODOLIST = 'TodoApp/TodoList/DELETE_TODOLIST';\nexport const DELETE_TASK = 'TodoApp/TodoList/DELETE_TASK';\nexport const SET_TODOLIST = \"TodoList/Reducer/SET_TODOLIST\";\nexport const SET_TODOLIST_ERROR = \"TodoList/Reducer/SET_TODOLIST_ERROR\";\nexport const SET_TASKS = \"TodoList/Reducer/SET_TASKS\";\nexport const UPDATE_TITLE_TODOLIST = \"TodoList/Reducer/UPDATE_TITLE_TODOLIST\";\nexport const LOADING_TODO = \"TodoList/Reducer/LOADING_TODO\";\nexport const LOADING_TASKS = \"TodoList/Reducer/LOADING_TASKS\";\nexport const SET_USER_DATA = \"TodoList/Reducer/SET_USER_DATA\";\nexport const LOGIN_SUCCESS = \"TodoList/Reducer/LOGIN_SUCCESS\";\nexport const LOGOUT_SUCCESS = \"TodoList/Reducer/LOGOUT_SUCCESS\";\n\nexport type initialStateType = {\n    todolists: Array<TodoType>\n    loadingTodo: boolean,\n    loadingTasks: boolean,\n    userId: string,\n    email: string,\n    login: string,\n    isAuth: boolean\n}\n\nconst initialState: initialStateType = {\n    todolists: [],\n    loadingTodo: false,\n    loadingTasks: false,\n    userId: '',\n    email: '',\n    login: '',\n    isAuth: false\n}\n\nconst todolistReducer = (state: initialStateType = initialState, action: ActionsType): initialStateType => {\n    switch (action.type) {\n        case SET_TODOLIST:\n            return {\n                ...state,\n                todolists: action.todolists\n            }\n        case CREATE_TODOLIST:\n            return {...state, todolists: [action.newTodolist, ...state.todolists]};\n        case UPDATE_TITLE_TODOLIST:\n            return {\n                ...state,\n                todolists: state.todolists.map(tl => {\n                    if (tl.id !== action.todolistId) {\n                        return tl\n                    } else {\n                        return {\n                            ...tl,\n                            title: action.title\n                        }\n                    }\n                })\n            }\n        case SET_TASKS:\n            return {\n                ...state,\n                todolists: state.todolists.map(tl => {\n                    if (tl.id !== action.todolistId) return tl;\n                    else {\n                        return {\n                            ...tl,\n                            tasks: action.tasks\n                        }\n                    }\n                })\n            }\n        case ADD_TASK:\n            return {\n                ...state,\n                todolists: state.todolists.map(tl => {\n                    if (tl.id === action.todolistId) {\n                        return {...tl, tasks: [...tl.tasks, action.newTask]}\n                    } else {\n                        return tl\n                    }\n                })\n            }\n        case UPDATE_TASK:\n            return {\n                ...state,\n                todolists: state.todolists.map(tl => {\n                    if (tl.id === action.todolistId) {\n                        return {\n                            ...tl,\n                            tasks: tl.tasks.map(t => {\n                                if (t.id !== action.taskId) {\n                                    return t;\n                                } else {\n                                    return {...t, ...action.obj};\n                                }\n                            })\n                        }\n                    } else {\n                        return tl\n                    }\n                })\n            }\n        case DELETE_TODOLIST:\n            return {\n                ...state,\n                todolists: state.todolists.filter(tl => tl.id !== action.todolistId)\n            }\n        case DELETE_TASK:\n            return {\n                ...state,\n                todolists: state.todolists.map(tl => {\n                    if (tl.id === action.todolistId) {\n                        return {\n                            ...tl,\n                            tasks: tl.tasks.filter(t => t.id !== action.taskId)\n                        }\n                    } else {\n                        return tl\n                    }\n                })\n            }\n        case LOADING_TODO:\n            return {\n                ...state, loadingTodo: action.isActive\n            }\n        case LOADING_TASKS:\n            return {\n                ...state, loadingTasks: action.isActive\n            }\n        /*case SET_TODOLIST_ERROR:\n            return {\n                ...state, //error: 'error'\n            }*/\n\n        case SET_USER_DATA:\n            return {\n                ...state, login: action.login, isAuth: true\n            }\n        case LOGIN_SUCCESS:\n            return {\n                ...state, isAuth: true\n            }\n        case LOGOUT_SUCCESS:\n            return {\n                ...state, isAuth: false\n            }\n    }\n    return state\n}\n\nexport default todolistReducer;\n\ntype ActionsType =\n    UpdateTaskSuccessActionType\n    | DeleteTodoSuccessActionType\n    | DeleteTaskSuccessActionType\n    | UpdateTodolistTitleSuccessActionType\n    | AddTaskSuccessActionType\n    | GetTasksSuccessActionType\n    | AddTodolistSuccessActionType\n    | GetTodolistsSuccessActionType\n    | LoadingTodoActionType\n    | LoadingTasksActionType\n    | SetAuthUserDataActionType\n    | LoginSuccessActionType\n    | LogoutSuccessActionType\n\n\ntype UpdateTaskSuccessActionType = {\n    type: typeof UPDATE_TASK\n    taskId: string\n    obj: TodoUpdateObject\n    todolistId: string\n}\ntype DeleteTodoSuccessActionType = {\n    type: typeof DELETE_TODOLIST\n    todolistId: string\n}\ntype DeleteTaskSuccessActionType = {\n    type: typeof DELETE_TASK\n    taskId: string\n    todolistId: string\n}\ntype UpdateTodolistTitleSuccessActionType = {\n    type: typeof UPDATE_TITLE_TODOLIST\n    todolistId: string\n    title: string\n}\ntype AddTaskSuccessActionType = {\n    type: typeof ADD_TASK\n    newTask: TaskType\n    todolistId: string\n}\ntype GetTasksSuccessActionType = {\n    type: typeof SET_TASKS\n    tasks: Array<TaskType>\n    todolistId: string\n}\ntype AddTodolistSuccessActionType = {\n    type: typeof CREATE_TODOLIST\n    newTodolist: TodoType\n}\ntype GetTodolistsSuccessActionType = {\n    type: typeof SET_TODOLIST\n    todolists: Array<TodoType>\n}\ntype LoadingTodoActionType = {\n    type: typeof LOADING_TODO\n    isActive: boolean\n}\ntype LoadingTasksActionType = {\n    type: typeof LOADING_TASKS\n    isActive: boolean\n}\ntype SetAuthUserDataActionType = {\n    type: typeof SET_USER_DATA\n    userId: string\n    login: string\n    email: string\n}\ntype LoginSuccessActionType = {\n    type: typeof LOGIN_SUCCESS\n}\ntype LogoutSuccessActionType = {\n    type: typeof LOGOUT_SUCCESS\n}\n\n// Action creator\n\nexport const addTodolistAC = (todolist: TodoType): AddTodolistSuccessActionType => {\n    return {type: CREATE_TODOLIST, newTodolist: todolist}\n}\nexport const updateTodolistAC = (title: string, todolistId: string): UpdateTodolistTitleSuccessActionType => {\n    return {type: UPDATE_TITLE_TODOLIST, title, todolistId}\n}\nexport const addTaskAC = (newTask: TaskType, todolistId: string): AddTaskSuccessActionType => {\n    return {type: ADD_TASK, newTask, todolistId};\n}\nexport const deleteTaskAC = (taskId: string, todolistId: string): DeleteTaskSuccessActionType => {\n    return {type: DELETE_TASK, taskId, todolistId};\n}\nexport const deleteTodolistAC = (todolistId: string): DeleteTodoSuccessActionType => {\n    return {type: DELETE_TODOLIST, todolistId}\n}\n/*export const setTodolistError = (todolists: Array<TodoType>) => {\n    return {type: SET_TODOLIST_ERROR}\n}*/\nexport const updateTaskAC = (taskId: string, todolistId: string, obj: TodoUpdateObject): UpdateTaskSuccessActionType => ({\n    type: UPDATE_TASK,\n    taskId,\n    todolistId,\n    obj\n});\n\nexport const setTodolistAC = (todolists: Array<TodoType>): GetTodolistsSuccessActionType => {\n    return {type: SET_TODOLIST, todolists: todolists}\n}\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string): GetTasksSuccessActionType => {\n    return {type: SET_TASKS, tasks, todolistId}\n}\n\nexport const loadingTodoAC = (isActive: boolean): LoadingTodoActionType => ({type: LOADING_TODO, isActive});\nexport const loadingTasksAC = (isActive: boolean): LoadingTasksActionType => ({type: LOADING_TASKS, isActive});\n\nexport const setAuthUserDataAC = (userId: string | any, login: string | any, email: string | any): SetAuthUserDataActionType => {\n    return {type: SET_USER_DATA, userId, login, email}\n}\nexport const loginSuccess = (): LoginSuccessActionType => {\n    return {type: LOGIN_SUCCESS}\n}\nexport const logoutSuccess = (): LogoutSuccessActionType => {\n    return {type: LOGOUT_SUCCESS}\n}\n\n// THUNK\n\ntype ThunkType = ThunkAction<void, AppStateType, unknown, ActionsType>;\ntype ThunkDispatch1 = ThunkDispatch<AppStateType, unknown, ActionsType>;\n\nexport const setTaskTC = (todolistId: string): ThunkType => (dispatch: ThunkDispatch1) => {\n    dispatch(loadingTasksAC(true));\n    api.getTasks(todolistId)\n        .then(res => {\n            dispatch(setTasksAC(res.items, todolistId));\n            dispatch(loadingTasksAC(false));\n        });\n}\nexport const deleteTodolistTC = (todolistId: string) => (dispatch: ThunkDispatch1) => {\n    api.deleteTodolist(todolistId)\n        .then(res => {\n            dispatch(deleteTodolistAC(todolistId));\n        });\n}\nexport const updateTodolistTC = (title: string, todolistId: string) => (dispatch: ThunkDispatch1) => {\n    api.updateTitleTodolist(title, todolistId)\n        .then(res => {\n            if (res.resultCode === 0) {\n                dispatch(updateTodolistAC(title, todolistId))\n            }\n        })\n}\nexport const addTaskTC = (newText: string, todolistId: string) => (dispatch: ThunkDispatch1) => {\n    api.createTask(newText, todolistId)\n        .then(res => {\n            dispatch(addTaskAC(res.data.data.item, todolistId));\n        });\n}\nexport const updateTaskTC = (taskId: string, todolistId: string, task: TaskType) => (dispatch: ThunkDispatch1) => {\n    api.updateTask(taskId, todolistId, task)\n        .then(res => {\n            dispatch(updateTaskAC(taskId, todolistId, task));\n        });\n}\nexport const deleteTaskTC = (taskId: string, todolistId: string) => (dispatch: ThunkDispatch1) => {\n    api.deleteTask(taskId, todolistId)\n        .then(res => {\n            dispatch(deleteTaskAC(taskId, todolistId));\n        });\n}\nexport const setTodolistsTC = (): ThunkType => (dispatch: ThunkDispatch1) => {\n    dispatch(loadingTodoAC(true))\n    api.getTodolist()\n        .then(res => {\n            dispatch(setTodolistAC(res));\n            dispatch(loadingTodoAC(false));\n        })\n    /*.catch((error) => {\n        dispatch(setTodolistError())\n    })*/\n}\nexport const addTodolistTC = (title: string) => (dispatch: ThunkDispatch1) => {\n    api.createTodolist(title)\n        .then(res => {\n            let todolist = res.data.item;\n            dispatch(addTodolistAC(todolist));\n        });\n}\nexport const setAuthUserDataTC = () => (dispatch: ThunkDispatch1) => {\n    return api.me()\n        .then(response => {\n            if (response.data.resultCode === 0) {\n                let {id, login, email} = response.data.data\n                dispatch(setAuthUserDataAC(id, login, email));\n            }\n        });\n}\n\nexport const signInTC = (email: string, password: string) => (dispatch: ThunkDispatch1) => {\n    return api.login(email, password)\n        .then(response => {\n            if (response.data.resultCode === 0) {\n                dispatch(loginSuccess());\n                dispatch(setAuthUserDataTC());\n                dispatch(setTodolistsTC());\n            }\n        }).catch(Error)\n}\n\nexport const signOutTC = () => (dispatch: ThunkDispatch1) => {\n    return api.logout()\n        .then(response => {\n            if (response.data.resultCode === 0) {\n                dispatch(logoutSuccess());\n            }\n        });\n}\n","import React from 'react';\nimport './App.css';\n\nimport TodoListTasks from './TodoListTasks/TodoListTasks';\nimport TodoListFooter from './TodoListFooter/TodoListFooter';\nimport TodoListTitle from \"./TodoListHeader/TodoListTitle\";\nimport AddNewItemForm from \"./TodoListHeader/AddNewItemForm\";\nimport {connect} from \"react-redux\";\nimport {\n    addTaskTC,\n    deleteTaskTC,\n    deleteTodolistTC,\n    setTaskTC, signInTC, updateTaskTC,\n    updateTodolistTC\n} from \"./todolistReducer\";\nimport {TaskType, TodoUpdateObject} from \"./types/entities\";\nimport {AppStateType} from \"./store\";\n\ntype StateType = {\n    filterValue: 'All' | 'Completed' | 'Active'\n}\n\ntype OwnPropsType = {\n    id: string\n    title: string\n    tasks: Array<TaskType>\n    loadingTasks: boolean\n}\n\ntype MapDispatchPropsType = {\n    setTaskTC: (todolistId: string) => void\n    signInTC: (login: string, email: string) => void\n    deleteTodolistTC: (todolistId: string) => void\n    updateTodolistTC: (title: string, todolistId: string) => void\n    addTaskTC: (newText: string, todolistId: string) => void\n    updateTaskTC: (taskId: string, todolistId: string, task: TaskType) => void\n    deleteTaskTC: (taskId: string, todolistId: string) => void\n}\n\nclass TodoList extends React.Component<OwnPropsType & MapDispatchPropsType, StateType> {\n\n    state: StateType = {\n        filterValue: \"All\"\n    };\n\n    componentDidMount() {\n        this.props.setTaskTC(this.props.id);\n    }\n\n    deleteTodolist = () => {\n        this.props.deleteTodolistTC(this.props.id);\n    };\n\n    updateTodolist = (title: string) => {\n        this.props.updateTodolistTC(title, this.props.id)\n    }\n\n    addTask = (newText: string) => {\n        this.props.addTaskTC(newText, this.props.id)\n    }\n\n    changeFilter = (newFilterValue: 'All' | 'Completed' | 'Active') => {\n        this.setState({filterValue: newFilterValue});\n    };\n\n    changeTask = (taskId: string, obj: TodoUpdateObject) => {\n        let changedTask = this.props.tasks.find(task => {\n            return task.id === taskId\n        });\n\n        if (changedTask) {\n            let task = {...changedTask, ...obj};\n            this.props.updateTaskTC(taskId, this.props.id, task)\n        }\n    };\n\n    changeStatus = (task: string, status: number) => {\n        this.changeTask(task, {status});\n    }\n\n    changeTitle = (task: string, title: string) => {\n        this.changeTask(task, {title: title});\n    }\n\n    changePriority = (task: string, priority: number) => {\n        this.changeTask(task, {priority: priority})\n}\n\n    deleteTask = (taskId: string) => {\n        this.props.deleteTaskTC(taskId, this.props.id)\n    }\n\n    render = () => {\n        let {tasks = []} = this.props;\n        let tasksFilter = tasks.filter(t => {\n            switch (this.state.filterValue) {\n                case \"Active\":\n                    return t.status !== 2;\n                case \"Completed\":\n                    return t.status === 2;\n                default:\n                    return true;\n            }\n        });\n        return (\n            <div className=\"App\">\n                <div className=\"todoList\">\n                        <TodoListTitle name={'Delete'}\n                                       title={this.props.title}\n                                       todolistId={this.props.id}\n                                       deleteTodolist={this.deleteTodolist}\n                                       updateTodolist={this.updateTodolist}/>\n                        <AddNewItemForm addItem={this.addTask} placeholder={'Create task'} btnName={'Create'}/>\n                    <TodoListTasks\n                        changeStatus={this.changeStatus}\n                        changeTitle={this.changeTitle}\n                        changePriority={this.changePriority}\n                        tasks={tasksFilter}\n                        deleteTask={this.deleteTask}\n                        loadingTasks={this.props.loadingTasks}\n                    />\n                    <TodoListFooter filterValue={this.state.filterValue} changeFilter={this.changeFilter}/>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst ConnectedTodoList = connect<{}, MapDispatchPropsType, OwnPropsType, AppStateType>(null, {\n    setTaskTC,\n    signInTC,\n    deleteTodolistTC,\n    updateTodolistTC,\n    addTaskTC,\n    updateTaskTC,\n    deleteTaskTC\n})(TodoList);\n\nexport default ConnectedTodoList;\n\n\n","import React from 'react';\nimport './Input.css';\n\nexport type OwnPropTypes = {\n    value: string\n    type?: string\n    placeholder: string\n    error?: boolean\n    onChange: (e: any) => void\n}\n\nconst Input = (props: OwnPropTypes) => {\n    const errorClass = props.error ? 'error' : '';\n    return (\n        <div className='input'>\n            <input type=\"text\" placeholder={props.placeholder}\n                   className={`${props.type} + ${errorClass}`}\n                   value={props.value}\n                   onChange={(e) => props.onChange(e)}\n                   autoFocus={true}/>\n        </div>\n    );\n}\n\nexport default Input;\n","import React, {ChangeEvent} from 'react';\nimport './App.css';\nimport TodoList from \"./TodoList\";\nimport AddNewItemForm from \"./TodoListHeader/AddNewItemForm\";\nimport {connect} from \"react-redux\";\nimport {addTodolistTC, setAuthUserDataTC, setTodolistsTC, signInTC, signOutTC} from \"./todolistReducer\";\nimport {AppStateType} from \"./store\";\nimport {TodoType} from \"./types/entities\";\nimport Input from \"./common/Button/input/Input\";\nimport Button from \"./common/Button/button/Button\";\n\ntype MapStatePropsType = {\n    todolists: Array<TodoType>\n    loadingTodo: boolean\n    loadingTasks: boolean\n    login: string\n    isAuth: boolean\n}\n\ntype MapDispatchPropsType = {\n    setTodolistsTC: () => void;\n    addTodolistTC: (title: string) => void;\n    setAuthUserDataTC: () => void;\n    signInTC: (email: string, password: string) => void;\n    signOutTC: () => void;\n}\n\ntype StateType = {\n    email: string\n    password: string\n    error: boolean\n}\n\ntype PropsType = MapStatePropsType & MapDispatchPropsType;\n\nclass App extends React.Component<PropsType, StateType> {\n\n    state: StateType = {\n        email: '',\n        password: '',\n        error: false\n    }\n\n    componentDidMount() {\n        this.restoreState();\n        this.props.setAuthUserDataTC();\n    };\n\n    addTodoList = (title: string) => {\n        this.props.addTodolistTC(title);\n    };\n\n    restoreState = () => {\n        this.props.setTodolistsTC();\n    }\n\n    setLogin = (e: ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            email: e.currentTarget.value\n        })\n    }\n    setPassword = (e: ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            password: e.currentTarget.value\n        })\n    }\n    signIn = () => {\n        if (this.state.email.trim() === \"\") {\n            this.setState({error: true})\n        } else {\n            this.props.signInTC(this.state.email, this.state.password);\n        }\n    }\n    signOut = () => {\n        this.props.signOutTC();\n    }\n    render = () => {\n        const todolist = this.props.todolists.map(tl =>\n            <TodoList key={tl.id}\n                      id={tl.id}\n                      title={tl.title}\n                      tasks={tl.tasks}\n                      loadingTasks={this.props.loadingTasks}\n            />)\n        return (\n            <div>\n                <>\n                    <AddNewItemForm addItem={this.addTodoList} placeholder={'Create a new task list'}\n                                    btnName={'Create'}/>\n                </>\n                <div className=\"authorization\">\n                    {this.props.isAuth ? this.props.login :\n                        <div className={'authorizationForm'}>\n                            <div className={'authFree'}>Hey!! For testing please use this email pastukh.v.7@gmail.com\n                                and this password SNSqwerty07\n                            </div>\n                            <Input value={this.state.email} placeholder={'Login'} onChange={this.setLogin} error={this.state.error}/>\n                            <Input value={this.state.password} placeholder={'Password'} onChange={this.setPassword} error={this.state.error}/>\n                            <Button btnName={'sign in'} type={'primary'} onClick={this.signIn}/>\n                        </div>}\n                    {this.props.isAuth ?\n                        <Button btnName={'Logout'} type={'primary'} onClick={this.signOut} small={true}/> : ''}\n                </div>\n                <div className=\"App\">\n                    {this.props.loadingTodo ? <span>Loading...</span> : todolist}\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\n    return {\n        todolists: state.todolist.todolists,\n        loadingTodo: state.todolist.loadingTodo,\n        loadingTasks: state.todolist.loadingTasks,\n        login: state.todolist.login,\n        isAuth: state.todolist.isAuth\n    }\n}\n\nconst ConnectedApp = connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(mapStateToProps, {\n    setTodolistsTC,\n    addTodolistTC,\n    setAuthUserDataTC,\n    signInTC,\n    signOutTC\n})(App);\nexport default ConnectedApp;\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport todolistReducer from \"./todolistReducer\";\nimport thunk from \"redux-thunk\";\nimport {composeWithDevTools} from \"redux-devtools-extension\";\n\nlet rootReducer = combineReducers({\n    todolist: todolistReducer\n})\n\nexport type AppStateType = ReturnType<typeof rootReducer>\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}